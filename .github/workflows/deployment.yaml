name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - feature/parity-with-remote
env:
  PROJECT_ID: arched-inkwell-368821                             # TODO: update Google Cloud project id
  GAR_LOCATION: us-east4                                        # TODO: update Artifact Registry location
  REPOSITORY: reference-architectures                           # TODO: update Artifact Registry repository name
  CONTAINER_SERVICE: pods                                       # TODO: update Cloud Run service name
  CONTAINER_DIRECTORY: ./code/Samples.Run.MarkdownPreview.Editor
  REGION: us-east4                                              # TODO: update Cloud Run service region #
  IMAGE_TAG: latest
  WORKING_DIRECTORY: ./terraform
  CLOUD_RUN_SA: cloud-run-sa
  
jobs:
  terraform: 
    name: "Terraform Deployment"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'     # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      #TODO: REMOVE AFTER FIRST RUN
      # - name: Deploy to Cloud Run 
      #   run: |- 
      #     gcloud run deploy ${{ env.CONTAINER_SERVICE }} --image us-docker.pkg.dev/cloudrun/container/hello:latest --project ${{ env.PROJECT_ID }} --region ${{ env.REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_KEY }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt 

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Terraform Plan
        id: plan
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform plan -no-color -input=false -var-file=dev.tfvars 
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file=dev.tfvars
        working-directory: ${{ env.WORKING_DIRECTORY }}
        


