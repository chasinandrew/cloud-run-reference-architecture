name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - feature/parity-with-remote
env:
  PROJECT_ID: arched-inkwell-368821 # TODO: update Google Cloud project id
  GAR_LOCATION: us-east4 # TODO: update Artifact Registry location
  REPOSITORY: reference-architectures # TODO: update Artifact Registry repository name
  FRONTEND_SERVICE: frontend # TODO: update Cloud Run service name
  FRONTEND_DIRECTORY: ./code/Samples.Run.MarkdownPreview.Editor
  REGION: us-east4 # TODO: update Cloud Run service region
  IMAGE_TAG: latest
  WORKING_DIRECTORY: ./terraform

jobs:
  deploy-frontend:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    outputs: 
      frontend-image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ env.IMAGE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Tag
        id: build-image
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.FRONTEND_DIRECTORY }}
          push: true 
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ env.IMAGE_TAG }}
      
      - name: Docker Push
        run: |-
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ env.IMAGE_TAG }}"

      - name: Create Service declaration   
        run: |-
          export FRONTEND_IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ env.IMAGE_TAG }}"
          export FRONTEND_SERVICE="${{ env.FRONTEND_SERVICE }}"
          export PROJECT_ID="${{ env.PROJECT_ID }}"
          envsubst < ./service-yaml/container.yaml > container.yaml
        
      - name: Deploy to Cloud Run
        run: |- 
          gcloud run services replace container.yaml --region=${{ env.REGION }}
        # id: deploy
        # uses: google-github-actions/deploy-cloudrun@v0
        # with:
        #   service: ${{ env.FRONTEND_SERVICE }}
        #   region: ${{ env.REGION }}
        #   metadata: container.yaml

  terraform: 
    name: "Terraform"
    needs: [deploy-frontend]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          # terraform_version: 1.4.2
          cli_config_credentials_token: ${{ secrets.TF_API_KEY }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt 

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file=dev.tfvars
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file=dev.tfvars
        working-directory: ${{ env.WORKING_DIRECTORY }}

