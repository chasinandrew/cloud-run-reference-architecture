name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - feature/setup
env:
  PROJECT_ID: arched-inkwell-368821 # TODO: update Google Cloud project id
  GAR_LOCATION: us-east4 # TODO: update Artifact Registry location
  REPOSITORY: reference-architectures # TODO: update Artifact Registry repository name
  BACKEND_SERVICE: backend # TODO: update Cloud Run service name
  BACKEND_DIRECTORY: ./code/Samples.Run.MarkdownPreview.Renderer
  FRONTEND_SERVICE: frontend # TODO: update Cloud Run service name
  FRONTEND_DIRECTORY: ./code/Samples.Run.MarkdownPreview.Editor
  REGION: us-east4 # TODO: update Cloud Run service region
  IMAGE_TAG: latest

jobs:
  deploy-frontend:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Tag
        id: build-image
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.FRONTEND_DIRECTORY }}
          push: true 
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ env.IMAGE_TAG }}
      
      - name: Docker Push
        run: |-
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ env.IMAGE_TAG }}"
  deploy-backend:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Tag
        id: build-image
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.BACKEND_DIRECTORY }}
          push: true 
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.BACKEND_SERVICE }}:${{ env.IMAGE_TAG }}
      
      - name: Docker Push
        run: |-
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.BACKEND_SERVICE }}:${{ env.IMAGE_TAG }}"
    # END - Docker auth and build

  terraform: 
    uses: ./.github/terraform.yml
    needs: [deploy-frontend, deploy-backend]

