name: Terraform 
description: Manages all operations to provision or deprovision terraform.
inputs:
  tf-path:
    required: false
    default: "${{ github.workspace }}"
    description: Path to your terraform workspace. Ensure the working directory is set within your terraform cloud workspace to match. Defaults to root.
  tf-plan:
    required: false
    default: "false"
    description: Performs a terraform plan. If set, a plan will not occur.      
  tf-apply:
    required: false
    default: "false"
    description: Performs a terraform apply. If set, an apply will not occur.
  tf-destroy:
    required: false
    default: "false"
    description: When set, will perform a terraform destroy after an apply.
  tf-version:
    required: false
    default: "~1"
    description: Terraform version to target.
  tf-refresh-false:
    required: false
    default: "false"
    description: When set, will append `-refresh=false` to the plan and apply.
  sleep: 
    required: false
    default: "300"
    description: Sets a sleep timer, in seconds, on a terraform destroy command.
  variables: 
    required: false
    default: ""
    description: Terraform variables that will be passed on the command line. Variables must be provided in json format without quotations.  

    

runs:
  using: "composite"
  steps:    

    - name: Append Variables
      uses: hca-ccoe/actions-github-json-parser@v1
      id: append-variables
      with:
        json-string: ${{ inputs.variables }}
        output-string: "-var='_KEY_'='_VALUE_'"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.tf-version }}

    - name: Terraform Init
      run: |
        echo "Terraform Init / Validate"
        terraform init -upgrade
        terraform validate
      working-directory: ${{ inputs.tf-path }}
      shell: bash

    - run: |
        echo "Terraform Format"
        terraform fmt -check
      continue-on-error: true
      working-directory: ${{ inputs.tf-path }}
      shell: bash

    - run: |
        echo "Terraform Plan"
        if [[ '${{ inputs.tf-plan }}' == 'true' ]]; then
          if [[ '${{ inputs.tf-refresh-false }}' == 'false' ]]; then
            terraform plan -no-color 
          elif [[ '${{ inputs.tf-refresh-false }}' == 'true' ]]; then
            terraform plan -no-color -refresh=false 
          fi
        fi
      id: plan
      working-directory: ${{ inputs.tf-path }}
      shell: bash
      
    - run: |
        Write-Output "Parse Plan File"
        if('${{ inputs.tf-plan }}' -eq 'true') {
          $stdout = @" 
            ${{ steps.plan.outputs.stdout }}
        "@
          ${{ github.action_path }}/parse_tf_plan.ps1 -ActionPath "${{ github.action_path }}" -PlanOutput $stdout 
        }
      id: plan-output
      shell: pwsh
      if: always()

    - name: Terraform Apply
      run: |
        echo "Terraform Apply"
        if [[ '${{ inputs.tf-apply }}' == 'true' ]]; then
          if [[ '${{ inputs.tf-refresh-false }}' == 'false' ]]; then
            terraform apply -auto-approve 
          elif [[ '${{ inputs.tf-refresh-false }}' == 'true' ]]; then
            terraform apply -auto-approve -refresh=false 
          fi
        fi
      working-directory: ${{ inputs.tf-path }}
      shell: bash

    - name: Terraform State List and Providers
      id: tf-state-list-providers
      run: |
        echo "Terraform State List and Providers"
        if [[ '${{ inputs.tf-apply }}' == 'true' ]]; then
          terraform state list
          terraform providers
        fi
      working-directory: ${{ inputs.tf-path }}
      shell: bash

    - name: Terraform Destroy
      id: tf-destroy
      run: |
        echo "Terraform Destroy"
        if [[ '${{ inputs.tf-destroy }}' == 'true' ]]; then
          sleep ${{ inputs.sleep }}s
          terraform destroy -auto-approve
        fi
      working-directory: ${{ inputs.tf-path }}
      shell: bash