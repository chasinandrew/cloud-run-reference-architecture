name: Plan and Apply Terraform
on:
  push:
  pull_request:
    paths: 
    - 'terraform/**'
    branches:
    - 'feature/**'
    - 'develop'
    - 'qa'
    - 'main'

env: 
  WORKING_DIRECTORY: ./terraform
  SERVICE_NAME: pods

jobs:
  terraform: 
    name: "Terraform Deployment"
    runs-on: ubuntu-latest
    permissions:
      actions: read
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'     # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      #TODO: REMOVE AFTER FIRST RUN
      # - name: Deploy to Cloud Run 
      #   run: |- 
      #     gcloud run deploy ${{ env.CONTAINER_SERVICE }} --image us-docker.pkg.dev/cloudrun/container/hello:latest --project ${{ env.PROJECT_ID }} --region ${{ env.REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_KEY }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt 

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIRECTORY }}


      ## Terraform Plan All ENVs
      - name: Terraform Plan DEV
        id: plan_dev
        run: terraform plan -no-color -input=false -var-file=envs/dev/dev.tfvars -var='frontend_service_name=${{ env.SERVICE_NAME }}'
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Terraform Plan QA
        id: plan_qa
        if: github.ref == 'refs/heads/develop' && github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -var-file=envs/qa/qa.tfvars -var='frontend_service_name=${{ env.SERVICE_NAME }}'
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Terraform Plan PROD
        id: plan_prod
        if: github.ref == 'refs/heads/qa' && github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -var-file=envs/prod/prod.tfvars -var='frontend_service_name=${{ env.SERVICE_NAME }}'
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      ## Terraform Apply DEV
      - name: Terraform Apply DEV
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file=envs/dev/dev.tfvars -var='frontend_service_name=${{ env.SERVICE_NAME }}'
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      ## Terraform Apply QA
      - name: Terraform Apply QA
        if: github.ref == 'refs/heads/qa' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file=envs/qa/qa.tfvars -var='frontend_service_name=${{ env.SERVICE_NAME }}'
        working-directory: ${{ env.WORKING_DIRECTORY }}

      ## Terraform Apply PROD
      - name: Terraform Apply PROD
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file=envs/prod/prod.tfvars -var='frontend_service_name=${{ env.SERVICE_NAME }}'
        working-directory: ${{ env.WORKING_DIRECTORY }}
        


